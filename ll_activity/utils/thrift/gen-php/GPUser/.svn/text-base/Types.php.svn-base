<?php
namespace GPUser;

/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


class GpUserBase {
  static $_TSPEC;

  /**
   * @var int
   */
  public $uid = null;
  /**
   * @var string
   */
  public $uname = null;
  /**
   * @var string
   */
  public $usalt = null;
  /**
   * @var string
   */
  public $upwd = null;
  /**
   * @var string
   */
  public $uex = null;
  /**
   * @var string
   */
  public $uphone = null;
  /**
   * @var string
   */
  public $uemail = null;
  /**
   * @var string
   */
  public $unickname = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'uid',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'uname',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'usalt',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'upwd',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'uex',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'uphone',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'uemail',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'unickname',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
      if (isset($vals['uname'])) {
        $this->uname = $vals['uname'];
      }
      if (isset($vals['usalt'])) {
        $this->usalt = $vals['usalt'];
      }
      if (isset($vals['upwd'])) {
        $this->upwd = $vals['upwd'];
      }
      if (isset($vals['uex'])) {
        $this->uex = $vals['uex'];
      }
      if (isset($vals['uphone'])) {
        $this->uphone = $vals['uphone'];
      }
      if (isset($vals['uemail'])) {
        $this->uemail = $vals['uemail'];
      }
      if (isset($vals['unickname'])) {
        $this->unickname = $vals['unickname'];
      }
    }
  }

  public function getName() {
    return 'GpUserBase';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->uname);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usalt);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->upwd);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->uex);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->uphone);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->uemail);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->unickname);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GpUserBase');
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::I32, 1);
      $xfer += $output->writeI32($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->uname !== null) {
      $xfer += $output->writeFieldBegin('uname', TType::STRING, 2);
      $xfer += $output->writeString($this->uname);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usalt !== null) {
      $xfer += $output->writeFieldBegin('usalt', TType::STRING, 3);
      $xfer += $output->writeString($this->usalt);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->upwd !== null) {
      $xfer += $output->writeFieldBegin('upwd', TType::STRING, 4);
      $xfer += $output->writeString($this->upwd);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->uex !== null) {
      $xfer += $output->writeFieldBegin('uex', TType::STRING, 5);
      $xfer += $output->writeString($this->uex);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->uphone !== null) {
      $xfer += $output->writeFieldBegin('uphone', TType::STRING, 6);
      $xfer += $output->writeString($this->uphone);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->uemail !== null) {
      $xfer += $output->writeFieldBegin('uemail', TType::STRING, 7);
      $xfer += $output->writeString($this->uemail);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->unickname !== null) {
      $xfer += $output->writeFieldBegin('unickname', TType::STRING, 8);
      $xfer += $output->writeString($this->unickname);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GpUserEx {
  static $_TSPEC;

  /**
   * @var int
   */
  public $productid = null;
  /**
   * @var int
   */
  public $cid = null;
  /**
   * @var int
   */
  public $usex = null;
  /**
   * @var string
   */
  public $usfz = null;
  /**
   * @var int
   */
  public $uregtime = null;
  /**
   * @var string
   */
  public $urealname = null;
  /**
   * @var string
   */
  public $ubbspwd = null;
  /**
   * @var string
   */
  public $uico = null;
  /**
   * @var int
   */
  public $ustatus = null;
  /**
   * @var string
   */
  public $unickname = null;
  /**
   * @var int[]
   */
  public $ufid = null;
  /**
   * @var string
   */
  public $usignature = null;
  /**
   * @var int
   */
  public $platform = null;
  /**
   * @var string
   */
  public $user_info = null;
  /**
   * @var string
   */
  public $imei = null;
  /**
   * @var string
   */
  public $address = null;
  /**
   * @var string
   */
  public $qq = null;
  /**
   * @var string
   */
  public $wechat = null;
  /**
   * @var string
   */
  public $birthday = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'productid',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'cid',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'usex',
          'type' => TType::I16,
          ),
        4 => array(
          'var' => 'usfz',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'uregtime',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'urealname',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'ubbspwd',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'uico',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'ustatus',
          'type' => TType::I16,
          ),
        10 => array(
          'var' => 'unickname',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'ufid',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        12 => array(
          'var' => 'usignature',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'platform',
          'type' => TType::I16,
          ),
        14 => array(
          'var' => 'user_info',
          'type' => TType::STRING,
          ),
        15 => array(
          'var' => 'imei',
          'type' => TType::STRING,
          ),
        16 => array(
          'var' => 'address',
          'type' => TType::STRING,
          ),
        17 => array(
          'var' => 'qq',
          'type' => TType::STRING,
          ),
        18 => array(
          'var' => 'wechat',
          'type' => TType::STRING,
          ),
        19 => array(
          'var' => 'birthday',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['productid'])) {
        $this->productid = $vals['productid'];
      }
      if (isset($vals['cid'])) {
        $this->cid = $vals['cid'];
      }
      if (isset($vals['usex'])) {
        $this->usex = $vals['usex'];
      }
      if (isset($vals['usfz'])) {
        $this->usfz = $vals['usfz'];
      }
      if (isset($vals['uregtime'])) {
        $this->uregtime = $vals['uregtime'];
      }
      if (isset($vals['urealname'])) {
        $this->urealname = $vals['urealname'];
      }
      if (isset($vals['ubbspwd'])) {
        $this->ubbspwd = $vals['ubbspwd'];
      }
      if (isset($vals['uico'])) {
        $this->uico = $vals['uico'];
      }
      if (isset($vals['ustatus'])) {
        $this->ustatus = $vals['ustatus'];
      }
      if (isset($vals['unickname'])) {
        $this->unickname = $vals['unickname'];
      }
      if (isset($vals['ufid'])) {
        $this->ufid = $vals['ufid'];
      }
      if (isset($vals['usignature'])) {
        $this->usignature = $vals['usignature'];
      }
      if (isset($vals['platform'])) {
        $this->platform = $vals['platform'];
      }
      if (isset($vals['user_info'])) {
        $this->user_info = $vals['user_info'];
      }
      if (isset($vals['imei'])) {
        $this->imei = $vals['imei'];
      }
      if (isset($vals['address'])) {
        $this->address = $vals['address'];
      }
      if (isset($vals['qq'])) {
        $this->qq = $vals['qq'];
      }
      if (isset($vals['wechat'])) {
        $this->wechat = $vals['wechat'];
      }
      if (isset($vals['birthday'])) {
        $this->birthday = $vals['birthday'];
      }
    }
  }

  public function getName() {
    return 'GpUserEx';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->productid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->cid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->usex);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usfz);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->uregtime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->urealname);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ubbspwd);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->uico);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->ustatus);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->unickname);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::LST) {
            $this->ufid = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $xfer += $input->readI32($elem5);
              $this->ufid []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usignature);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->platform);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->user_info);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->imei);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->address);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->qq);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->wechat);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 19:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->birthday);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GpUserEx');
    if ($this->productid !== null) {
      $xfer += $output->writeFieldBegin('productid', TType::I32, 1);
      $xfer += $output->writeI32($this->productid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cid !== null) {
      $xfer += $output->writeFieldBegin('cid', TType::I32, 2);
      $xfer += $output->writeI32($this->cid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usex !== null) {
      $xfer += $output->writeFieldBegin('usex', TType::I16, 3);
      $xfer += $output->writeI16($this->usex);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usfz !== null) {
      $xfer += $output->writeFieldBegin('usfz', TType::STRING, 4);
      $xfer += $output->writeString($this->usfz);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->uregtime !== null) {
      $xfer += $output->writeFieldBegin('uregtime', TType::I32, 5);
      $xfer += $output->writeI32($this->uregtime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->urealname !== null) {
      $xfer += $output->writeFieldBegin('urealname', TType::STRING, 6);
      $xfer += $output->writeString($this->urealname);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ubbspwd !== null) {
      $xfer += $output->writeFieldBegin('ubbspwd', TType::STRING, 7);
      $xfer += $output->writeString($this->ubbspwd);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->uico !== null) {
      $xfer += $output->writeFieldBegin('uico', TType::STRING, 8);
      $xfer += $output->writeString($this->uico);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ustatus !== null) {
      $xfer += $output->writeFieldBegin('ustatus', TType::I16, 9);
      $xfer += $output->writeI16($this->ustatus);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->unickname !== null) {
      $xfer += $output->writeFieldBegin('unickname', TType::STRING, 10);
      $xfer += $output->writeString($this->unickname);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ufid !== null) {
      if (!is_array($this->ufid)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('ufid', TType::LST, 11);
      {
        $output->writeListBegin(TType::I32, count($this->ufid));
        {
          foreach ($this->ufid as $iter6)
          {
            $xfer += $output->writeI32($iter6);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usignature !== null) {
      $xfer += $output->writeFieldBegin('usignature', TType::STRING, 12);
      $xfer += $output->writeString($this->usignature);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->platform !== null) {
      $xfer += $output->writeFieldBegin('platform', TType::I16, 13);
      $xfer += $output->writeI16($this->platform);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->user_info !== null) {
      $xfer += $output->writeFieldBegin('user_info', TType::STRING, 14);
      $xfer += $output->writeString($this->user_info);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->imei !== null) {
      $xfer += $output->writeFieldBegin('imei', TType::STRING, 15);
      $xfer += $output->writeString($this->imei);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->address !== null) {
      $xfer += $output->writeFieldBegin('address', TType::STRING, 16);
      $xfer += $output->writeString($this->address);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->qq !== null) {
      $xfer += $output->writeFieldBegin('qq', TType::STRING, 17);
      $xfer += $output->writeString($this->qq);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->wechat !== null) {
      $xfer += $output->writeFieldBegin('wechat', TType::STRING, 18);
      $xfer += $output->writeString($this->wechat);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->birthday !== null) {
      $xfer += $output->writeFieldBegin('birthday', TType::STRING, 19);
      $xfer += $output->writeString($this->birthday);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GpUser {
  static $_TSPEC;

  /**
   * @var \GPUser\GpUserBase
   */
  public $base = null;
  /**
   * @var \GPUser\GpUserEx
   */
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'base',
          'type' => TType::STRUCT,
          'class' => '\GPUser\GpUserBase',
          ),
        2 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\GPUser\GpUserEx',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['base'])) {
        $this->base = $vals['base'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'GpUser';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->base = new \GPUser\GpUserBase();
            $xfer += $this->base->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \GPUser\GpUserEx();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GpUser');
    if ($this->base !== null) {
      if (!is_object($this->base)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('base', TType::STRUCT, 1);
      $xfer += $this->base->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      if (!is_object($this->ex)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 2);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetUserReq {
  static $_TSPEC;

  /**
   * @var int
   */
  public $uid = null;
  /**
   * @var string
   */
  public $u = null;
  /**
   * @var string
   */
  public $unickname = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'uid',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'u',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'unickname',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
      if (isset($vals['u'])) {
        $this->u = $vals['u'];
      }
      if (isset($vals['unickname'])) {
        $this->unickname = $vals['unickname'];
      }
    }
  }

  public function getName() {
    return 'GetUserReq';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->u);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->unickname);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetUserReq');
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::I32, 1);
      $xfer += $output->writeI32($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->u !== null) {
      $xfer += $output->writeFieldBegin('u', TType::STRING, 2);
      $xfer += $output->writeString($this->u);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->unickname !== null) {
      $xfer += $output->writeFieldBegin('unickname', TType::STRING, 3);
      $xfer += $output->writeString($this->unickname);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetUserRes {
  static $_TSPEC;

  /**
   * @var bool
   */
  public $success = null;
  /**
   * @var \GPUser\GpUser
   */
  public $user = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        2 => array(
          'var' => 'user',
          'type' => TType::STRUCT,
          'class' => '\GPUser\GpUser',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['user'])) {
        $this->user = $vals['user'];
      }
    }
  }

  public function getName() {
    return 'GetUserRes';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->user = new \GPUser\GpUser();
            $xfer += $this->user->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetUserRes');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 1);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->user !== null) {
      if (!is_object($this->user)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('user', TType::STRUCT, 2);
      $xfer += $this->user->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CheckLoginStateReq {
  static $_TSPEC;

  /**
   * @var int
   */
  public $product_id = null;
  /**
   * @var int
   */
  public $appid = null;
  /**
   * @var string
   */
  public $login_key = null;
  /**
   * @var int
   */
  public $uin = null;
  /**
   * @var string
   */
  public $uuid = null;
  /**
   * @var string
   */
  public $remote_addr = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'product_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'appid',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'login_key',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'uin',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'uuid',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'remote_addr',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['product_id'])) {
        $this->product_id = $vals['product_id'];
      }
      if (isset($vals['appid'])) {
        $this->appid = $vals['appid'];
      }
      if (isset($vals['login_key'])) {
        $this->login_key = $vals['login_key'];
      }
      if (isset($vals['uin'])) {
        $this->uin = $vals['uin'];
      }
      if (isset($vals['uuid'])) {
        $this->uuid = $vals['uuid'];
      }
      if (isset($vals['remote_addr'])) {
        $this->remote_addr = $vals['remote_addr'];
      }
    }
  }

  public function getName() {
    return 'CheckLoginStateReq';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->product_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->appid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->login_key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->uin);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->uuid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->remote_addr);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CheckLoginStateReq');
    if ($this->product_id !== null) {
      $xfer += $output->writeFieldBegin('product_id', TType::I32, 1);
      $xfer += $output->writeI32($this->product_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->appid !== null) {
      $xfer += $output->writeFieldBegin('appid', TType::I32, 2);
      $xfer += $output->writeI32($this->appid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->login_key !== null) {
      $xfer += $output->writeFieldBegin('login_key', TType::STRING, 3);
      $xfer += $output->writeString($this->login_key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->uin !== null) {
      $xfer += $output->writeFieldBegin('uin', TType::I32, 4);
      $xfer += $output->writeI32($this->uin);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->uuid !== null) {
      $xfer += $output->writeFieldBegin('uuid', TType::STRING, 5);
      $xfer += $output->writeString($this->uuid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->remote_addr !== null) {
      $xfer += $output->writeFieldBegin('remote_addr', TType::STRING, 6);
      $xfer += $output->writeString($this->remote_addr);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CheckLoginStateRes {
  static $_TSPEC;

  /**
   * @var bool
   */
  public $success = null;
  /**
   * @var int
   */
  public $code = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        2 => array(
          'var' => 'code',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['code'])) {
        $this->code = $vals['code'];
      }
    }
  }

  public function getName() {
    return 'CheckLoginStateRes';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CheckLoginStateRes');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 1);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->code !== null) {
      $xfer += $output->writeFieldBegin('code', TType::I32, 2);
      $xfer += $output->writeI32($this->code);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class UpdateUserReq {
  static $_TSPEC;

  /**
   * @var \GPUser\GpUser
   */
  public $user = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user',
          'type' => TType::STRUCT,
          'class' => '\GPUser\GpUser',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['user'])) {
        $this->user = $vals['user'];
      }
    }
  }

  public function getName() {
    return 'UpdateUserReq';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->user = new \GPUser\GpUser();
            $xfer += $this->user->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UpdateUserReq');
    if ($this->user !== null) {
      if (!is_object($this->user)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('user', TType::STRUCT, 1);
      $xfer += $this->user->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class UpdateUserRes {
  static $_TSPEC;

  /**
   * @var bool
   */
  public $success = null;
  /**
   * @var int
   */
  public $code = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        2 => array(
          'var' => 'code',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['code'])) {
        $this->code = $vals['code'];
      }
    }
  }

  public function getName() {
    return 'UpdateUserRes';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UpdateUserRes');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 1);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->code !== null) {
      $xfer += $output->writeFieldBegin('code', TType::I32, 2);
      $xfer += $output->writeI32($this->code);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetAppGameUinReq {
  static $_TSPEC;

  /**
   * @var int
   */
  public $appid = null;
  /**
   * @var int
   */
  public $uid = null;
  /**
   * @var int
   */
  public $cid = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'appid',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'uid',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'cid',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['appid'])) {
        $this->appid = $vals['appid'];
      }
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
      if (isset($vals['cid'])) {
        $this->cid = $vals['cid'];
      }
    }
  }

  public function getName() {
    return 'GetAppGameUinReq';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->appid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->cid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetAppGameUinReq');
    if ($this->appid !== null) {
      $xfer += $output->writeFieldBegin('appid', TType::I32, 1);
      $xfer += $output->writeI32($this->appid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::I32, 2);
      $xfer += $output->writeI32($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cid !== null) {
      $xfer += $output->writeFieldBegin('cid', TType::I32, 3);
      $xfer += $output->writeI32($this->cid);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetAppGameUinRes {
  static $_TSPEC;

  /**
   * @var bool
   */
  public $success = null;
  /**
   * @var string
   */
  public $game_uin = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        2 => array(
          'var' => 'game_uin',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['game_uin'])) {
        $this->game_uin = $vals['game_uin'];
      }
    }
  }

  public function getName() {
    return 'GetAppGameUinRes';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->game_uin);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetAppGameUinRes');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 1);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->game_uin !== null) {
      $xfer += $output->writeFieldBegin('game_uin', TType::STRING, 2);
      $xfer += $output->writeString($this->game_uin);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetUidFromGameUinReq {
  static $_TSPEC;

  /**
   * @var int
   */
  public $appid = null;
  /**
   * @var string
   */
  public $game_uin = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'appid',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'game_uin',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['appid'])) {
        $this->appid = $vals['appid'];
      }
      if (isset($vals['game_uin'])) {
        $this->game_uin = $vals['game_uin'];
      }
    }
  }

  public function getName() {
    return 'GetUidFromGameUinReq';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->appid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->game_uin);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetUidFromGameUinReq');
    if ($this->appid !== null) {
      $xfer += $output->writeFieldBegin('appid', TType::I32, 1);
      $xfer += $output->writeI32($this->appid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->game_uin !== null) {
      $xfer += $output->writeFieldBegin('game_uin', TType::STRING, 2);
      $xfer += $output->writeString($this->game_uin);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetUidFromGameUinRes {
  static $_TSPEC;

  /**
   * @var bool
   */
  public $success = null;
  /**
   * @var int
   */
  public $uid = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        2 => array(
          'var' => 'uid',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
    }
  }

  public function getName() {
    return 'GetUidFromGameUinRes';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetUidFromGameUinRes');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 1);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::I32, 2);
      $xfer += $output->writeI32($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetUidAllAppidAndGameUinReq {
  static $_TSPEC;

  /**
   * @var int
   */
  public $uid = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'uid',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
    }
  }

  public function getName() {
    return 'GetUidAllAppidAndGameUinReq';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetUidAllAppidAndGameUinReq');
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::I32, 1);
      $xfer += $output->writeI32($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AppidAndGameUin {
  static $_TSPEC;

  /**
   * @var int
   */
  public $uid = null;
  /**
   * @var int
   */
  public $appid = null;
  /**
   * @var string
   */
  public $game_uin = null;
  /**
   * @var int
   */
  public $addtime = null;
  /**
   * @var int
   */
  public $cid = null;
  /**
   * @var int
   */
  public $ucid = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'uid',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'appid',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'game_uin',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'addtime',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'cid',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'ucid',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
      if (isset($vals['appid'])) {
        $this->appid = $vals['appid'];
      }
      if (isset($vals['game_uin'])) {
        $this->game_uin = $vals['game_uin'];
      }
      if (isset($vals['addtime'])) {
        $this->addtime = $vals['addtime'];
      }
      if (isset($vals['cid'])) {
        $this->cid = $vals['cid'];
      }
      if (isset($vals['ucid'])) {
        $this->ucid = $vals['ucid'];
      }
    }
  }

  public function getName() {
    return 'AppidAndGameUin';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->appid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->game_uin);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->addtime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->cid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ucid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AppidAndGameUin');
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::I32, 1);
      $xfer += $output->writeI32($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->appid !== null) {
      $xfer += $output->writeFieldBegin('appid', TType::I32, 2);
      $xfer += $output->writeI32($this->appid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->game_uin !== null) {
      $xfer += $output->writeFieldBegin('game_uin', TType::STRING, 3);
      $xfer += $output->writeString($this->game_uin);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->addtime !== null) {
      $xfer += $output->writeFieldBegin('addtime', TType::I32, 4);
      $xfer += $output->writeI32($this->addtime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cid !== null) {
      $xfer += $output->writeFieldBegin('cid', TType::I32, 5);
      $xfer += $output->writeI32($this->cid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ucid !== null) {
      $xfer += $output->writeFieldBegin('ucid', TType::I32, 6);
      $xfer += $output->writeI32($this->ucid);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetUidAllAppidAndGameUinRes {
  static $_TSPEC;

  /**
   * @var bool
   */
  public $success = null;
  /**
   * @var \GPUser\AppidAndGameUin[]
   */
  public $AppidAndGameUinArr = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        2 => array(
          'var' => 'AppidAndGameUinArr',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\GPUser\AppidAndGameUin',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['AppidAndGameUinArr'])) {
        $this->AppidAndGameUinArr = $vals['AppidAndGameUinArr'];
      }
    }
  }

  public function getName() {
    return 'GetUidAllAppidAndGameUinRes';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->AppidAndGameUinArr = array();
            $_size7 = 0;
            $_etype10 = 0;
            $xfer += $input->readListBegin($_etype10, $_size7);
            for ($_i11 = 0; $_i11 < $_size7; ++$_i11)
            {
              $elem12 = null;
              $elem12 = new \GPUser\AppidAndGameUin();
              $xfer += $elem12->read($input);
              $this->AppidAndGameUinArr []= $elem12;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetUidAllAppidAndGameUinRes');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 1);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->AppidAndGameUinArr !== null) {
      if (!is_array($this->AppidAndGameUinArr)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('AppidAndGameUinArr', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->AppidAndGameUinArr));
        {
          foreach ($this->AppidAndGameUinArr as $iter13)
          {
            $xfer += $iter13->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AddUserReq {
  static $_TSPEC;

  /**
   * @var \GPUser\GpUser
   */
  public $user = null;
  /**
   * @var int
   */
  public $appid = null;
  /**
   * @var string
   */
  public $ip = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user',
          'type' => TType::STRUCT,
          'class' => '\GPUser\GpUser',
          ),
        2 => array(
          'var' => 'appid',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'ip',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['user'])) {
        $this->user = $vals['user'];
      }
      if (isset($vals['appid'])) {
        $this->appid = $vals['appid'];
      }
      if (isset($vals['ip'])) {
        $this->ip = $vals['ip'];
      }
    }
  }

  public function getName() {
    return 'AddUserReq';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->user = new \GPUser\GpUser();
            $xfer += $this->user->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->appid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ip);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AddUserReq');
    if ($this->user !== null) {
      if (!is_object($this->user)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('user', TType::STRUCT, 1);
      $xfer += $this->user->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->appid !== null) {
      $xfer += $output->writeFieldBegin('appid', TType::I32, 2);
      $xfer += $output->writeI32($this->appid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ip !== null) {
      $xfer += $output->writeFieldBegin('ip', TType::STRING, 3);
      $xfer += $output->writeString($this->ip);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AddUserRes {
  static $_TSPEC;

  /**
   * @var bool
   */
  public $success = null;
  /**
   * @var int
   */
  public $uid = null;
  /**
   * @var string
   */
  public $game_uin = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        2 => array(
          'var' => 'uid',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'game_uin',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
      if (isset($vals['game_uin'])) {
        $this->game_uin = $vals['game_uin'];
      }
    }
  }

  public function getName() {
    return 'AddUserRes';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->game_uin);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AddUserRes');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 1);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::I32, 2);
      $xfer += $output->writeI32($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->game_uin !== null) {
      $xfer += $output->writeFieldBegin('game_uin', TType::STRING, 3);
      $xfer += $output->writeString($this->game_uin);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


